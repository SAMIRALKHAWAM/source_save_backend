<?php

namespace App\Services;

use App\Http\Requests\Auth\SendOTPRequest;
use App\Http\Requests\User\Auth\ResendOTPRequest;
use App\Http\Requests\User\Auth\ResetPasswordRequest;
use App\Http\Requests\User\Auth\UserLoginRequest;
use App\Http\Requests\User\Auth\VerifyAccountRequest;
use App\Mail\OTPVerificationMail;
use App\Models\Code;
use App\Models\User;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Hash;

class UserService extends BaseService
{

    public function __construct(User $model)
    {
        $this->model = $model;

    }


    public function create($data)
    {
        $user = parent::create($data); // TODO: Change the autogenerated stub
        $mail = new OTPVerificationMail();
        $mail->sendEmail($user);
        return $user;
    }

    public function getAll($where = [])
    {
        if (\request()->route()->getPrefix() == 'user_api') {
            $user = \auth('user')->user();
            $where = [['id', '!=', $user->id]];
        }
        return parent::getAll($where); // TODO: Change the autogenerated stub
    }


    public function Logout(){
        $user = \auth('user')->user();
        $user->tokens()->where('scopes', '["user"]')->delete();
        return \Success('user Logout Successfully');
    }

    public function ResendOTP(ResendOTPRequest $request)
    {
        $arr = Arr::only($request->validated(), ['email']);
        $user = User::where('email', $arr['email'])->first();
        $mail = new OTPVerificationMail();
        $mail->sendEmail($user);
        return \Success('OTP Send Successfully');
    }


    public function Login(UserLoginRequest $request){
        $actor =  $request->attributes->get('actor');
        $role =  $request->attributes->get('role');
        if (!empty($request->input('fcm_token'))){
            $actor->update(['fcm_token' => $request->input('fcm_token')]);
        }
        $actor['role'] = $role;
        $actor['token'] = $actor->createToken('authToken', [$role])->accessToken;

        return \SuccessData('user Login Successfully', $actor);
    }

    public function VerifyAccount(VerifyAccountRequest $request){
        $user =  $request->attributes->get('user');
        $user->update(['email_verified_at' => \now()]);
        $user->Code()->delete();
        unset($user->Code);
        $user['token'] = $user->createToken('authToken', ['user'])->accessToken;
        return \SuccessData('Email verified successfully', $user);
    }

    public function ResetPassword(ResetPasswordRequest $request){
        $user = $request->attributes->get('user');
        $password = $request->input('password');
        $user->update(['password' => $password]);
        $user->Code()->delete();
        unset($user->Code);
        return \Success('Password Changed successfully');
    }
}
